/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

//import Controlador.CancionController;
import Controlador.ConvertidorDeStringAArrayCancion;
import Controlador.SocketCliente;
import Modelo.Cancion;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JuanPablo
 */
public class Cliente extends javax.swing.JFrame {

    public String ip;
    public String usuarioActual;
    
    public SocketCliente socket;
    
    DefaultTableModel modelo;

    public String getIp() {
        return ip;
    }

    public void setIp(String ip) {
        this.ip = ip;
    }

    public String getUsuarioActual() {
        return usuarioActual;
    }

    public void setUsuarioActual(String usuarioActual) {
        this.usuarioActual = usuarioActual;
    }

    
    
    //constructor
    public Cliente(){
        initComponents();
        this.setLocationRelativeTo(null);
        logArea.append("Conectado con éxito a la base de datos\n");
    }
    
    //por parametros
    public Cliente(String ipViene, String userViene, SocketCliente socket) {
        initComponents();
        logArea.append("Conectado con éxito a la base de datos\n");
        
        this.ip = ipViene;
        this.usuarioActual = userViene;
        this.socket = socket;
        
        textoUsuarioActual.setText("Bienvenid@ " + userViene);
        
        
    }
    
    private void limpiarTabla(){
       for(int i=0; i<tabla.getRowCount(); i++) {
           modelo.removeRow(i);
           i-=1;
       }
   }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        botonActualizarCanciones = new javax.swing.JButton();
        textoUsuarioActual = new javax.swing.JLabel();
        btnFavoritas = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        labelTitulo = new javax.swing.JLabel();
        labelArtista = new javax.swing.JLabel();
        labelDuracion = new javax.swing.JLabel();
        labelCalidad = new javax.swing.JLabel();
        labelValoracion = new javax.swing.JLabel();
        labelRuta = new javax.swing.JLabel();
        textTitulo = new javax.swing.JTextField();
        textArtista = new javax.swing.JTextField();
        textDuracion = new javax.swing.JTextField();
        textCalidad = new javax.swing.JTextField();
        textValoracion = new javax.swing.JTextField();
        textRuta = new javax.swing.JTextField();
        botonInsertarCancion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Título", "Artista", "Duración", "Genero", "Valoración", "Tamaño(bytes)", "Subida por"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 675, 290));

        botonActualizarCanciones.setText("Ver todas");
        botonActualizarCanciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarCancionesActionPerformed(evt);
            }
        });
        jPanel1.add(botonActualizarCanciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 31, -1, -1));

        textoUsuarioActual.setText("jLabel1");
        jPanel1.add(textoUsuarioActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 11, 124, -1));

        btnFavoritas.setText("Favoritas");
        btnFavoritas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFavoritasActionPerformed(evt);
            }
        });
        jPanel1.add(btnFavoritas, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/fondo.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-50, 0, 750, 390));

        jTabbedPane1.addTab("Canciones", jPanel1);

        logArea.setColumns(20);
        logArea.setRows(5);
        jScrollPane2.setViewportView(logArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(245, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Log", jPanel3);

        labelTitulo.setText("TItulo");

        labelArtista.setText("Artista");

        labelDuracion.setText("Duración (en segundos)");

        labelCalidad.setText("Calidad");

        labelValoracion.setText("Valoración (de 1 a 5)");

        labelRuta.setText("Ruta");

        textCalidad.setText("Kb/s");

        botonInsertarCancion.setText("Subir Cancion");
        botonInsertarCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInsertarCancionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(labelValoracion)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textValoracion, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(labelDuracion)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(textDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(labelCalidad)
                            .addGap(18, 18, 18)
                            .addComponent(textCalidad)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTitulo)
                            .addComponent(labelArtista))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textArtista, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(labelRuta)
                        .addGap(30, 30, 30)
                        .addComponent(textRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(88, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonInsertarCancion)
                .addGap(264, 264, 264))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTitulo)
                    .addComponent(textTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelArtista)
                    .addComponent(textArtista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDuracion)
                    .addComponent(textDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCalidad)
                    .addComponent(textCalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelValoracion)
                    .addComponent(textValoracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRuta)
                    .addComponent(textRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(botonInsertarCancion)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Añadir Canción", jPanel2);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 5, 700, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void botonInsertarCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInsertarCancionActionPerformed
        
        /*
        CancionController cc = new CancionController();
        boolean resultado = cc.insertarCancion( this.getIp(),new Cancion( textTitulo.getText(), textArtista.getText(),  Integer.parseInt(textDuracion.getText()), textCalidad.getText(), Integer.parseInt(textValoracion.getText()), textRuta.getText()) );
        
        
        if(resultado){
            logArea.append("Cancion insertada en la BD con éxito\n");
        }else{
            logArea.append("Fallo al insertar la cancion en la BD\n");
        }
              
        */
    }//GEN-LAST:event_botonInsertarCancionActionPerformed

    private void botonActualizarCancionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarCancionesActionPerformed
       
        
    
        //primero limpio la tabla, por si habia ya algun resultado mostrando
        this.limpiarTabla();
        
        //el string ke me devuelve el servidor con las canciones
        String cancionesString = "";
        
        //trasnformare el String en un array de canciones
        ArrayList<Cancion> listaCanciones = new ArrayList<>();
        
        
        try {
            //ahora envio peticion al servidor, para que me envie las canciones
            //llamo al controlador Socket, y a su metodo traer canciones
            //me devuelve el churro String que envio el servidor con todas las cancines
            cancionesString = socket.traerCancionesDelServidor(usuarioActual);
        } catch (IOException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        //llamo al convertidor de string a array
        ConvertidorDeStringAArrayCancion convert = new ConvertidorDeStringAArrayCancion();
        listaCanciones = convert.convertirAArray(cancionesString);
        
   
        
        
        //vamos a mostrar mensaje en el log, sólo si el array tiene algo dentro
        if(!listaCanciones.isEmpty()){
            logArea.append("Canciones encontradas en la BD y mostradas con éxito\n");
        }else
            logArea.append("No se han encontrado canciones\n");
        
        
        
        //voy a quitarle el valor true/false, que ahora mismo viene con el propietario
        ArrayList<String> nombreUser = new ArrayList<>();
        for (Cancion cancion : listaCanciones) {
            
            nombreUser.clear();
            StringTokenizer tokens = new StringTokenizer(cancion.getId_usuario(),":");
            
            while(tokens.hasMoreTokens()){
            //el primer token (0) será el nombre de usuario que la ha subido
            //el segundo token (1) será el TRUE o FALSE
            nombreUser.add(tokens.nextToken());

            }

            //y ahora el id_usuario será solo el usuario
            cancion.setId_usuario(nombreUser.get(0));
            
        }
        
        
        
        
        
        
        //ahora vamos a meter los datos en la tabla
        //creo el modelo de tabla
        
        modelo = (DefaultTableModel) tabla.getModel();//y le asigno un elemento de la vista
        
        //creo el vector de columnas
        Object[] fila = new Object[modelo.getColumnCount()];
        
        //y meto en cada columna el resultado de la consulta, de cada columna
        for(int i=0;i<listaCanciones.size();i++){
            fila[0] = listaCanciones.get(i).getTitulo();
            fila[1] = listaCanciones.get(i).getArtista();
            fila[2] = listaCanciones.get(i).getDuracion();
            fila[3] = listaCanciones.get(i).getGenero();
            fila[4] = listaCanciones.get(i).getValoracion();
            fila[5] = listaCanciones.get(i).getTamanio_bytes();
            fila[6] = listaCanciones.get(i).getId_usuario();
            
            modelo.addRow(fila);//añado al modelo la fila entera(que está compuesta por columnas)
        }
        
        
        
        
    }//GEN-LAST:event_botonActualizarCancionesActionPerformed

    private void btnFavoritasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFavoritasActionPerformed
        
        
        //primero limpio la tabla, por si habia ya algun resultado mostrando
        this.limpiarTabla();
        
        //el string ke me devuelve el servidor con las canciones
        String cancionesString = "";
        
        //trasnformare el String en un array de canciones
        ArrayList<Cancion> listaCanciones = new ArrayList<>();
        
        
        try {
            //ahora envio peticion al servidor, para que me envie las canciones
            //llamo al controlador Socket, y a su metodo traer canciones
            //me devuelve el churro String que envio el servidor con todas las cancines
            cancionesString = socket.traerCancionesDelServidor(usuarioActual);
        } catch (IOException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        //llamo al convertidor de string a array
        ConvertidorDeStringAArrayCancion convert = new ConvertidorDeStringAArrayCancion();
        listaCanciones = convert.convertirAArray(cancionesString);
        
        
        //vamos a mostrar mensaje en el log, sólo si el array tiene algo dentro
        if(!listaCanciones.isEmpty()){
            logArea.append("Canciones encontradas en la BD y mostradas con éxito\n");
        }else
            logArea.append("No se han encontrado canciones\n");
        
        
        
        
        
        //creo un array de canciones, que guardará las canciones favoritas
        ArrayList<Cancion> listaFavoritas = new ArrayList<>();
        
        //creo array para meter las variables para el nombre de usuario y el TRUE/False
        ArrayList<String> arrayAux = new ArrayList<>();
        
       
        //del array de canciones, voy a sacar las "favoritas"
        //osea, las que tienen el valor true
        //y de paso al propietario le quito ese valor(true/false), para que solo salga el nombre
        for (Cancion cancion : listaCanciones) {
            
            //borro el contenido del arrayAux sino no furula
            arrayAux.clear();
            
            StringTokenizer tokens = new StringTokenizer(cancion.getId_usuario(),":");
            
                while(tokens.hasMoreTokens()){
                    //el primer token (0) será el nombre de usuario que la ha subido
                    //el segundo token (1) será el TRUE o FALSE
                    arrayAux.add(tokens.nextToken());

                }
                
                if("TRUE".equals(arrayAux.get(1))){
                    //primero le pongo el nombre del propietario bien (sin true/false)
                    cancion.setId_usuario(arrayAux.get(0));
                    //la meto en el array de favoritas
                    listaFavoritas.add(cancion);
                            
                }
            
            
        }
        
        
        
        //ahora vamos a meter los datos de las favoritas en la tabla
        //creo el modelo de tabla
        
        modelo = (DefaultTableModel) tabla.getModel();//y le asigno un elemento de la vista
        
        //creo el vector de columnas
        Object[] fila = new Object[modelo.getColumnCount()];
        
        //y meto en cada columna el resultado de la consulta, de cada columna
        for(int i=0;i<listaFavoritas.size();i++){
            fila[0] = listaFavoritas.get(i).getTitulo();
            fila[1] = listaFavoritas.get(i).getArtista();
            fila[2] = listaFavoritas.get(i).getDuracion();
            fila[3] = listaFavoritas.get(i).getGenero();
            fila[4] = listaFavoritas.get(i).getValoracion();
            fila[5] = listaFavoritas.get(i).getTamanio_bytes();
            fila[6] = listaFavoritas.get(i).getId_usuario();
            
            modelo.addRow(fila);//añado al modelo la fila entera(que está compuesta por columnas)
        }
        
        
        
    }//GEN-LAST:event_btnFavoritasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cliente().setVisible(true);
            }
        });
        
      
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonActualizarCanciones;
    private javax.swing.JButton botonInsertarCancion;
    private javax.swing.JButton btnFavoritas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelArtista;
    private javax.swing.JLabel labelCalidad;
    private javax.swing.JLabel labelDuracion;
    private javax.swing.JLabel labelRuta;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JLabel labelValoracion;
    private javax.swing.JTextArea logArea;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField textArtista;
    private javax.swing.JTextField textCalidad;
    private javax.swing.JTextField textDuracion;
    private javax.swing.JTextField textRuta;
    private javax.swing.JTextField textTitulo;
    private javax.swing.JTextField textValoracion;
    private javax.swing.JLabel textoUsuarioActual;
    // End of variables declaration//GEN-END:variables
}
